<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue源码深入剖析之响应式系统]]></title>
    <url>%2F2019%2F08%2F03%2Fvue%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B9%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[Vue.js作为一款十分流行mvvm框架，数据模型（vm）部分都是普通的js对象，但是对这些对象进行操作的时候，却能影响视图（v）。实现这一连接的就是「响应式系统」，Vue最核心的部分就是「响应式系统」。虽然日常使用中并不会修改「响应式系统」，但是深入学习它可以帮助我们了解之后有可能遇到的问题的根源，从而更好的解决问题。 基本原理篇首先我们找到vue的目录，看到core文件夹下的目录结构如下： 「响应式系统」的所有源码都在observer文件夹下。为了更好的理解，之后的分析会把此文件夹下的代码由简入繁的展示。 1. Object.defineProperty说到Vue的「响应式系统」，首先必须介绍一下Object.defineProperty, Vue就是基于他来实现「响应式系统」的。 1234567/*obj: 目标对象prop: 需要操作的目标对象的属性名 descriptor: 描述符return value 传入对象 */Object.defineProperty(obj, prop, descriptor) 其中，简单介绍descriptor 的一些属性，这些在Vue中被使用。 enumerable属性是否可枚举，默认 false。 configurable属性是否可以被修改或者删除，默认 false。 get获取属性的方法。 set设置属性的方法。 2. 把对象响应式化（defineReactive）知道了Object.defineProperty以后，Vue用它使对象变成可观察的。 由于源码中defineReactive有很多功能，较为复杂，我们可以先简单的实现一个： 12345678910111213function defineReactive (obj, key, val) &#123; Object.defineProperty(obj, key, &#123; enumerable: true, /* 属性可枚举 */ configurable: true, /* 属性可被修改或删除 */ get: function reactiveGetter () &#123; return val; &#125;, set: function reactiveSetter (newVal) &#123; if (newVal === val) return; callback(newVal); &#125; &#125;);&#125; 其中callback是回调方法，这个函数用来模拟视图更新，调用它即代表更新视图。此处我们就随便写一个 123function callback (val) &#123; console.log(&quot;视图更新！&quot;); &#125; 经过defineReactive处理以后，我们的obj的key属性在「读」的时候会触发reactiveGetter方法，而在该属性被「写」的时候则会触发 reactiveSetter方法。 3. Observer有了前面的defineReactive，我们需要在上面再封装一层observer。 由于源码中observer有很多功能，较为复杂，我们可以先简单的实现一个： 12345678function observer (value) &#123; if (!value || (typeof value !== &apos;object&apos;)) &#123; return; &#125; Object.keys(value).forEach((key) =&gt; &#123; defineReactive(value, key, value[key]); &#125;)&#125; 这个函数传入一个 value(需要「响应式」化的对象)，通过遍历所有属性的方式对该对象的每一个属性都通过defineReactive处理。 原理的基础实现有了上述的模块，我们就可以简单的实现一个「响应式系统」了，也可以说实现一个Vue的雏形 123456class Vue &#123; constructor(options) &#123; this.data = options.data; observer(this.data); &#125;&#125; 在 Vue 的构造函数中，对options的data进行处理，这里的data想必大家很熟悉，就是平时我们在写Vue项目时组件中的data属性(实际上是一个函数，这里当作一个对象来简单处理)。 然后我们把他实例化，并且修改一下被响应式化了的属性 123456let app = new Vue(&#123; data: &#123; test: &quot;I am test.&quot; &#125;&#125;);app.data.test = &quot;hello,world.&quot;; 你会看到console里输出了之前callback函数的语句——“视图更新！” 至此，响应式原理已经介绍完了 思考一个简单的响应式系统完成了，可是它还有很多的问题，比如： 如果视图上并不需要用到的属性imnouse更新了，我们这个雏形中也仍然会执行callback操作。 在有多个视图共享同一个数据模型的时候，属性imveryfamous被view1和view2视图实例用来展示。此时imveryfamous改变了，需要准确的通知到view1和view2，而不要通知其他的视图。 这就需要用到下一篇要说的「依赖收集」，它是「响应式系统」很重要的一个功能，源码也放置在core\observer文件夹中。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first blog]]></title>
    <url>%2F2019%2F08%2F01%2Ffirst-blog%2F</url>
    <content type="text"><![CDATA[Lorem ipsum dolor sit amet, vix ut case porro facilisis, alia possit neglegentur vis te. Has cu eirmod abhorreant, vel civibus efficiantur cu. Eu summo elitr vix, iusto putant maluisset per ut, ne etiam vivendum adipisci vel. Vis omnis tempor accusam ei, justo perpetua liberavisse cu qui. Saperet aliquando adipiscing ius ne, ne facer euripidis est. Pro mundi nostrum suavitate et. Vix dico eius nominati cu, ex zril commodo fuisset mea. Habeo adhuc audiam ius no. In quis virtute officiis has. Vix ad honestatis accommodare, quis virtute et sit, pertinax expetenda eam id. Duo an fuisset delectus dissentias, justo altera ea per. TodoDuis id ante elit. Aliquam quis tellus id orci eleifend finibus. Donec consequat justo ligula, eget sodales purus hendrerit at. Ut at interdum nunc. Maecenas commodo turpis quis elementum gravida. Nunc ac sapien tellus. Quisque risus enim, tempus eget porttitor in, pellentesque vel urna. Donec nibh massa, rutrum a sollicitudin eu,lacinia in lorem. Graphic design Graphic design is the paradise of individuality, eccentricity, heresy, abnormality, hobbies, and humors. - George Santayana Vim te case nihil oblique, has partem interpretaris ne, ad admodum accusamus nam. Usu utinam dissentias referrentur ne, vim accusam voluptua pertinacia no. Est no posse utinam inermis, brute errem mentitum et ius, te prompta albucius quo. In pro simul soleat regione. Ne reque offendit singulis mea, ad eos ferri doming nostrud. Duis suscipit usu ut, fuisset pericula ex est, et porro prompta his. Audire definiebas voluptatibus et duo, aperiam ocurreret ad nec. Vel ad nostrud principes. Ad liber congue iracundia sed, eirmod erroribus eam te, has veniam epicurei ea. Pri probo alterum aliquando an. Duo appetere laboramus intellegat ea, ex suas diam exerci vix. Mel simul debitis id, est nusquam fuisset mentitum in. Te mei iudico iisque. 首先我们找到vue的目录，看到core文件夹下的目录结构如下： 「响应式系统」的所有源码都在observer文件夹下。为了更好的理解，之后的分析会把此文件夹下的代码由简入繁的展示。]]></content>
      <tags>
        <tag>common</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
