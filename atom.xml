<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ven&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-08T06:42:50.801Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jiang Wenxiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法学习之递归三——斐波那契问题</title>
    <link href="http://yoursite.com/2019/08/08/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92%E4%B8%89%E2%80%94%E2%80%94%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/08/算法学习之递归三——斐波那契问题/</id>
    <published>2019-08-08T06:34:11.000Z</published>
    <updated>2019-08-08T06:42:50.801Z</updated>
    
    <content type="html"><![CDATA[<p>斐波那契数列又因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”。</p><blockquote><p>一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。<br>如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？</p></blockquote><a id="more"></a><p>我们不妨拿新出生的一对小兔子分析一下：<br>第一个月小兔子没有繁殖能力，所以还是一对<br>两个月后，生下一对小兔对数共有两对<br>三个月以后，老兔子又生下一对，因为小兔子还没有繁殖能力，所以一共是三对</p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><p>依次类推可以总结出以下规律<br>幼仔对数=前月成兔对数<br>成兔对数=前月成兔对数+前月幼仔对数<br>总体对数=本月成兔对数+本月幼仔对数</p><p>所以归纳一下，得出数学表达式如下：</p><blockquote><p>F(1)=1<br>F(2)=1<br>F(n)=F(n-1)+F(n-2)</p></blockquote><h3 id="斐波那契问题解决"><a href="#斐波那契问题解决" class="headerlink" title="斐波那契问题解决"></a>斐波那契问题解决</h3><p>用代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 斐波那契问题</span><br><span class="line">function fibo(n) &#123;</span><br><span class="line">if(typeof n !== &apos;number&apos;) &#123;</span><br><span class="line">console.log(&apos;请输入数字&apos;)</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(n&lt;0) &#123;</span><br><span class="line">console.log(&apos;必须为正整数&apos;)</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(n%1 !== 0) &#123;</span><br><span class="line">console.log(&apos;必须为正整数&apos;)</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(n === 0) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;else if(n === 1) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return fibo(n-1) + fibo(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>斐波那契数列在欧美可谓是尽人皆知，在自然科学的其他分支，有许多应用，在电影这种通俗艺术中也时常出现。数学在生活中的体现往往不是那么明显，但我们可以从生活中感受到科学的神奇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;斐波那契数列又因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。&lt;br&gt;如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法学习之递归二——汉诺塔</title>
    <link href="http://yoursite.com/2019/08/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92%E4%BA%8C%E2%80%94%E2%80%94%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
    <id>http://yoursite.com/2019/08/07/算法学习之递归二——汉诺塔/</id>
    <published>2019-08-07T12:59:34.000Z</published>
    <updated>2019-08-07T13:08:50.638Z</updated>
    
    <content type="html"><![CDATA[<p>我们先看一个印度的古老传说：</p><blockquote><p>在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。</p></blockquote><a id="more"></a><p>多么可怕的故事啊，但是简化以后就变成一下这幅图，这就是汉诺塔。</p><div style="width:400px; margin: 0 auto;">        <img src="/2019/08/07/算法学习之递归二——汉诺塔/hanoi.png" title="汉诺塔图片"></div><p>有三根相邻的柱子，标号为A,B,C，A柱子上从下到上按金字塔状叠放着n个不同大小的圆盘，要把所有盘子一个一个移动到柱子C上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要多少次移动，设移动次数为H(n）。<br>首先我们肯定是把上面n-1个盘子移动到柱子B上，然后把最大的一块放在C上，最后把B上的所有盘子移动到C上，由此我们得出表达式：</p><blockquote><p>H(1) = 1<br>H(n) = 2*H(n-1）+1 (n&gt;1）</p></blockquote><h3 id="汉诺塔实现"><a href="#汉诺塔实现" class="headerlink" title="汉诺塔实现"></a>汉诺塔实现</h3><p>这个就可以化为递归的边界值了。用代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function hanoi(n, a = &apos;a&apos;, b = &apos;b&apos;, c = &apos;c&apos;) &#123;</span><br><span class="line">if (n === 1) &#123;</span><br><span class="line">count ++;</span><br><span class="line">console.log(`第$&#123;count&#125;次，$&#123;a&#125;柱--&gt;$&#123;c&#125;柱`);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">hanoi(n-1, a, c, b);</span><br><span class="line">count ++;</span><br><span class="line">console.log(`第$&#123;count&#125;次，$&#123;a&#125;柱--&gt;$&#123;c&#125;柱`);</span><br><span class="line">hanoi(n-1, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let count = 0;</span><br><span class="line">function startHanoi(n) &#123;</span><br><span class="line">count = 0;</span><br><span class="line">hanoi(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过计算，其实n层汉诺塔移动所需的次数是2^n - 1次。所以回到之前的印度神话，64层汉诺塔移动所需要的次数是18446744073709551615次，就算每秒移动一次，完成也需要5845.54亿年以上。那确实地球早已毁灭了。</p><p>所以，灭世还很长，不用去担心众生毁于一声霹雳。 <strong>但学习的路同样也很长，不要停止努力。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们先看一个印度的古老传说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue源码深入剖析之依赖收集</title>
    <link href="http://yoursite.com/2019/08/05/vue%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/08/05/vue源码深入剖析之依赖收集/</id>
    <published>2019-08-05T08:11:07.000Z</published>
    <updated>2019-08-05T14:33:48.909Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章我们用一个简化之后简单实现作为例子，实现了一个简单的「响应式系统」。</p><p>但这个例子有许多问题需要解决，比如：</p><ol><li>如果视图上并不需要用到的属性<code>imnouse</code>更新了，我们这个雏形中也仍然会执行callback操作。</li><li>在有多个视图共享同一个数据模型的时候，属性<code>imveryfamous</code>被<code>view1</code>和<code>view2</code>视图实例用来展示。此时<code>imveryfamous</code>改变了，需要准确的通知到<code>view1</code>和<code>view2</code>，而不要通知其他的视图。</li></ol><p>为了解决这些问题，我们为之前的简单示例添加「依赖收集」的功能。</p><a id="more"></a><h1 id="基本原理篇"><a href="#基本原理篇" class="headerlink" title="基本原理篇"></a>基本原理篇</h1><p>在vue的目录，看到core文件夹下的目录结构如下：</p><div style="width:200px">        <img src="/2019/08/05/vue源码深入剖析之依赖收集/observer_folder_constructure.png" title="目录结构"></div><p>今天要说的「依赖收集」的代码就在<code>core/observer/watcher.js</code>和<code>core/observer/dep.js</code>中。同样，由于源码中的实现较为全面，本文会以做了大量的简化之后简单实现来作为示例。</p><p>「依赖收集」的关系如下图所示。每个响应式对象都有一个订阅者Dep，用来存放订阅的watcher。当对象被读取（get）时，当前的watcher会被压入Dep中添加依赖，而每个watcher都是一个观察者，当对象被修改（set）时，会执行所有依赖的watcher的callback。</p><div style="width:500px; margin: 0 auto;">        <img src="/2019/08/05/vue源码深入剖析之依赖收集/reactive_object.png" title="依赖收集的结构"></div><h2 id="1-订阅者Dep"><a href="#1-订阅者Dep" class="headerlink" title="1. 订阅者Dep"></a>1. 订阅者Dep</h2><p>我们先简单的实现一个订阅者Dep，它主要用来存放watcher</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Dep &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        /* 用来存放 Watcher 对象的数组 */</span><br><span class="line">        this.subs = [];</span><br><span class="line">    &#125;</span><br><span class="line">    /* 在 subs 中添加一个 Watcher 对象 */</span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        this.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    /* 通知所有 Watcher 对象更新视图 */</span><br><span class="line">    notify() &#123;</span><br><span class="line">        this.subs.forEach((sub) = &gt;&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">export function setTarget (_target) &#123;</span><br><span class="line">  Dep.target = _target</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = null</span><br></pre></td></tr></table></figure><p>Dep中有两个方法，分别是：</p><ol><li>addSub添加订阅者，实际应用时就是把当前的watcher添加到Dep对象的订阅者数组中去</li><li>notify的方法，通知Dep中所有的订阅者去触发他们的更新操作</li></ol><h2 id="2-观察者Watcher"><a href="#2-观察者Watcher" class="headerlink" title="2. 观察者Watcher"></a>2. 观察者Watcher</h2><p>再来简单的实现一个watcher，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; pushTarget &#125; from &apos;./dep&apos;</span><br><span class="line">class Watcher &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        /* 在 new 一个 Watcher 对象时将该对象通过pushTarget方法，设置为当前target，在 get 中会用到 */</span><br><span class="line">        setTarget(this);</span><br><span class="line">    &#125;</span><br><span class="line">    /* 更新视图的方法 */</span><br><span class="line">    update() &#123;</span><br><span class="line">        console.log(&quot;视图更新啦~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-修改defineReactive"><a href="#3-修改defineReactive" class="headerlink" title="3. 修改defineReactive"></a>3. 修改defineReactive</h2><p>我们增加了一个Dep类的对象，用来收集watcher对象。在对象被「读」的时候，会触发reactiveGetter函数把当前的Watcher对象(存放在Dep.target 中)收集到Dep类中去。之后如果当该对象被「写」的时候，则会触发reactiveSetter方法，通知Dep类调用notify来触发所有Watcher对象的update方法更新对应视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function defineReactive(obj, key, val) &#123;</span><br><span class="line">    /* 一个Dep类对象 */</span><br><span class="line">    const dep = new Dep();</span><br><span class="line">    Object.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: true,</span><br><span class="line">        configurable: true,</span><br><span class="line">        get: function reactiveGetter() &#123;</span><br><span class="line">            /* 将 Dep.target(即当前的 Watcher 对象存入 dep 的 subs 中) */</span><br><span class="line">            dep.addSub(Dep.target);</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function reactiveSetter(newVal) &#123;</span><br><span class="line">            if (newVal === val) return;</span><br><span class="line">            /* 在 set 的时候触发 dep 的 notify 来通知所有的 Watcher 对象更新视图 */</span><br><span class="line">            dep.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原理的基础实现"><a href="#原理的基础实现" class="headerlink" title="原理的基础实现"></a>原理的基础实现</h1><p>我们修改一下之前的Vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Vue &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this._data = options.data;</span><br><span class="line">        observer(this._data);</span><br><span class="line">        /* 新建一个 Watcher 观察者对象，这时候 Dep.target 会指向这个 Watcher 对象 */</span><br><span class="line">        new Watcher();</span><br><span class="line">        /* 在这里模拟 render 的过程，为了触发 test 属性的 get 函数 */</span><br><span class="line">        console.log(&apos;render~&apos;, this._data.test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在observer的过程中会注册get方法，该方法用来进行「依赖收集」。在它的闭包中会有一个Dep对象，这个对象用来存放Watcher对象的实例。其实「依赖收集」的过程就是把Watcher实例存放到对应的Dep对象中去。get方法可以让当前的Watcher对象 (Dep.target)存放到它的subs中 (addSub)方法，在数据变化时，set会调用Dep对象的notify方法通知它内部所有的Watcher对象进行视图更新。</p><p>这是Object.defineProperty的set / get方法处理的事情，那么「依赖收集」的前提条件还有两个: </p><ol><li>触发get方法</li><li>新建一个Watcher对象</li></ol><p>这个我们在Vue的构造类中处理。新建一个Watcher对象只需要new出来，这时候Dep.target已经指向了这个new出来的Watcher对象来。而触发get方法也很简单，实际上只要把renderfunction进行渲染，那么其中的依赖的对象都会被「读取」，这里我们通过打印来模拟这个过程，读取test来触发get进行「依赖收集」。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，简单的「响应式系统」就已经建立起来了，他可以通过get来进行「依赖收集」，然后通过set来通知观察者更新视图。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章我们用一个简化之后简单实现作为例子，实现了一个简单的「响应式系统」。&lt;/p&gt;
&lt;p&gt;但这个例子有许多问题需要解决，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果视图上并不需要用到的属性&lt;code&gt;imnouse&lt;/code&gt;更新了，我们这个雏形中也仍然会执行callback操作。&lt;/li&gt;
&lt;li&gt;在有多个视图共享同一个数据模型的时候，属性&lt;code&gt;imveryfamous&lt;/code&gt;被&lt;code&gt;view1&lt;/code&gt;和&lt;code&gt;view2&lt;/code&gt;视图实例用来展示。此时&lt;code&gt;imveryfamous&lt;/code&gt;改变了，需要准确的通知到&lt;code&gt;view1&lt;/code&gt;和&lt;code&gt;view2&lt;/code&gt;，而不要通知其他的视图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决这些问题，我们为之前的简单示例添加「依赖收集」的功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>算法学习之递归</title>
    <link href="http://yoursite.com/2019/08/03/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2019/08/03/算法学习之递归/</id>
    <published>2019-08-03T09:38:52.000Z</published>
    <updated>2019-08-07T12:58:56.147Z</updated>
    
    <content type="html"><![CDATA[<p>递归（Recursion）,在数学与计算机科学中是指在函数的定义中有调用了函数自身的方法。是一种思考问题的方法，通过递归可以简化问题的定义。</p><a id="more"></a><h1 id="递归的本质"><a href="#递归的本质" class="headerlink" title="递归的本质"></a>递归的本质</h1><p>递归本质是缩小问题规模。<br>把大规模的问题逐步缩小，小到一定程度可以直接得出它的解。</p><h2 id="递归能解决哪些问题"><a href="#递归能解决哪些问题" class="headerlink" title="递归能解决哪些问题"></a>递归能解决哪些问题</h2><p>能使用递归解决的问题，有三个特点：</p><ol><li>每一次递归调用，规模都应该缩小</li><li>两次递归调用之间有紧密的联系，前一次要为后一次递归调用做准备</li><li>在问题规模极小的时候可以直接给出解答</li></ol><p>递归需要考虑的两个方面：</p><ol><li>确定递归公式，如何缩减规模</li><li>确定边界条件，如何得到边界值</li></ol><h1 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h1><p>一下是理解了递归的思想后，用JS实现的一些基础算法</p><h3 id="计算最大公约数"><a href="#计算最大公约数" class="headerlink" title="计算最大公约数"></a>计算最大公约数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 使用辗转相除法 M mod N = R，用N mod R递归，直到余数为零</span><br><span class="line">function gcd (m,n) &#123;</span><br><span class="line">if(typeof m !== &apos;number&apos; || typeof n !== &apos;number&apos;) return;</span><br><span class="line">    let r = m % n;</span><br><span class="line">    if(r === 0) &#123;</span><br><span class="line">        return n;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return gcd(n,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function fact(n) &#123;</span><br><span class="line">if(typeof n !== &apos;number&apos;) return;</span><br><span class="line">if(n === 0) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return n * fact(n-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;递归（Recursion）,在数学与计算机科学中是指在函数的定义中有调用了函数自身的方法。是一种思考问题的方法，通过递归可以简化问题的定义。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue源码深入剖析之响应式系统</title>
    <link href="http://yoursite.com/2019/08/03/vue%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B9%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/08/03/vue源码深入剖析之响应式系统/</id>
    <published>2019-08-03T07:22:25.000Z</published>
    <updated>2019-08-05T09:05:52.039Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js作为一款十分流行mvvm框架，数据模型（vm）部分都是普通的js对象，但是对这些对象进行操作的时候，却能影响视图（v）。实现这一连接的就是「响应式系统」，Vue最核心的部分就是「响应式系统」。虽然日常使用中并不会修改「响应式系统」，但是深入学习它可以帮助我们了解之后有可能遇到的问题的根源，从而更好的解决问题。</p><a id="more"></a><h1 id="基本原理篇"><a href="#基本原理篇" class="headerlink" title="基本原理篇"></a>基本原理篇</h1><p>首先我们找到vue的目录，看到core文件夹下的目录结构如下：</p><div style="width:200px">        <img src="/2019/08/03/vue源码深入剖析之响应式系统/observer_folder_constructure.png" title="目录结构"></div><p>「响应式系统」的所有源码都在observer文件夹下。为了更好的理解，之后的分析会把此文件夹下的代码<strong>由简入繁</strong>的展示。</p><p>今天要说的「响应式系统」的代码就在<code>core/observer/index.js</code>中。由于源码中的实现较为全面，本文会以做了大量的简化之后简单实现来作为示例。</p><h2 id="1-Object-defineProperty"><a href="#1-Object-defineProperty" class="headerlink" title="1. Object.defineProperty"></a>1. Object.defineProperty</h2><p>说到Vue的「响应式系统」，首先必须介绍一下Object.defineProperty, Vue就是基于他来实现「响应式系统」的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">obj: 目标对象</span><br><span class="line">prop: 需要操作的目标对象的属性名 </span><br><span class="line">descriptor: 描述符</span><br><span class="line">return value 传入对象 </span><br><span class="line">*/</span><br><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p>其中，简单介绍descriptor 的一些属性，这些在Vue中被使用。</p><ul><li>enumerable属性是否可枚举，默认 false。</li><li>configurable属性是否可以被修改或者删除，默认 false。</li><li>get获取属性的方法。</li><li>set设置属性的方法。</li></ul><h2 id="2-把对象响应式化（defineReactive）"><a href="#2-把对象响应式化（defineReactive）" class="headerlink" title="2. 把对象响应式化（defineReactive）"></a>2. 把对象响应式化（defineReactive）</h2><p>知道了Object.defineProperty以后，Vue用它使对象变成可观察的。</p><p>我们可以先简单的实现一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function defineReactive (obj, key, val) &#123; </span><br><span class="line">    Object.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: true, /* 属性可枚举 */ </span><br><span class="line">        configurable: true, /* 属性可被修改或删除 */ </span><br><span class="line">        get: function reactiveGetter () &#123;</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function reactiveSetter (newVal) &#123; </span><br><span class="line">            if (newVal === val) return; </span><br><span class="line">            callback(newVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中callback是回调方法，这个函数用来模拟视图更新，调用它即代表更新视图。此处我们就随便写一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function callback (val) &#123; </span><br><span class="line">    console.log(&quot;视图更新！&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过defineReactive处理以后，我们的obj的key属性在「读」的时候会触发reactiveGetter方法，而在该属性被「写」的时候则会触发 reactiveSetter方法。</p><h2 id="3-Observer"><a href="#3-Observer" class="headerlink" title="3. Observer"></a>3. Observer</h2><p>有了前面的defineReactive，我们需要在上面再封装一层observer。</p><p>我们可以先简单的实现一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function observer (value) &#123;</span><br><span class="line">    if (!value || (typeof value !== &apos;object&apos;)) &#123;</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    Object.keys(value).forEach((key) =&gt; &#123;</span><br><span class="line">       defineReactive(value, key, value[key]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数传入一个 value(需要「响应式」化的对象)，通过遍历所有属性的方式对该对象的每一个属性都通过defineReactive处理。</p><h1 id="原理的基础实现"><a href="#原理的基础实现" class="headerlink" title="原理的基础实现"></a>原理的基础实现</h1><p>有了上述的模块，我们就可以简单的实现一个「响应式系统」了，也可以说实现一个Vue的雏形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Vue &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this.data = options.data;</span><br><span class="line">        observer(this.data); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Vue 的构造函数中，对options的data进行处理，这里的data想必大家很熟悉，就是平时我们在写Vue项目时组件中的data属性(实际上是一个函数，这里当作一个对象来简单处理)。</p><p>然后我们把他实例化，并且修改一下被响应式化了的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let app = new Vue(&#123; </span><br><span class="line">    data: &#123;</span><br><span class="line">       test: &quot;I am test.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.data.test = &quot;hello,world.&quot;;</span><br></pre></td></tr></table></figure><p>你会看到console里输出了之前callback函数的语句——“视图更新！”</p><p>至此，响应式原理已经介绍完了</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>一个简单的响应式系统完成了，可是它还有很多的问题，比如：</p><ol><li>如果视图上并不需要用到的属性<code>imnouse</code>更新了，我们这个雏形中也仍然会执行callback操作。</li><li>在有多个视图共享同一个数据模型的时候，属性<code>imveryfamous</code>被<code>view1</code>和<code>view2</code>视图实例用来展示。此时<code>imveryfamous</code>改变了，需要准确的通知到<code>view1</code>和<code>view2</code>，而不要通知其他的视图。</li></ol><p>这就需要用到下一篇要说的「依赖收集」，它是「响应式系统」很重要的一个功能，源码也放置在<code>core\observer</code>文件夹中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue.js作为一款十分流行mvvm框架，数据模型（vm）部分都是普通的js对象，但是对这些对象进行操作的时候，却能影响视图（v）。实现这一连接的就是「响应式系统」，Vue最核心的部分就是「响应式系统」。虽然日常使用中并不会修改「响应式系统」，但是深入学习它可以帮助我们了解之后有可能遇到的问题的根源，从而更好的解决问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
