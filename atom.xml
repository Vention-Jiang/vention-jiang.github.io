<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ven&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-03T09:45:17.696Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jiang Wenxiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法学习之递归</title>
    <link href="http://yoursite.com/2019/08/03/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2019/08/03/算法学习之递归/</id>
    <published>2019-08-03T09:38:52.000Z</published>
    <updated>2019-08-03T09:45:17.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h1><p>递归（Recursion）,在数学与计算机科学中是指在函数的定义中有调用了函数自身的方法。是一种思考问题的方法，通过递归可以简化问题的定义。</p><a id="more"></a><h2 id="递归的本质"><a href="#递归的本质" class="headerlink" title="递归的本质"></a>递归的本质</h2><p>递归本质是缩小问题规模。<br>把大规模的问题逐步缩小，小到一定程度可以直接得出它的解。</p><h2 id="递归能解决哪些问题"><a href="#递归能解决哪些问题" class="headerlink" title="递归能解决哪些问题"></a>递归能解决哪些问题</h2><p>能使用递归解决的问题，有三个特点：<br>1、每一次递归调用，规模都应该缩小<br>2、两次递归调用之间有紧密的联系，前一次要为后一次递归调用做准备<br>3、在问题规模极小的时候可以直接给出解答</p><p>递归需要考虑的两个方面：<br>1、确定递归公式，如何缩减规模<br>2、确定边界条件，如何得到边界值</p><h1 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h1><h3 id="计算最大公约数"><a href="#计算最大公约数" class="headerlink" title="计算最大公约数"></a>计算最大公约数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 使用辗转相除法 M mod N = R，用N mod R递归，直到余数为零</span><br><span class="line">function gcd (m,n) &#123;</span><br><span class="line">if(typeof m !== &apos;number&apos; || typeof n !== &apos;number&apos;) return;</span><br><span class="line">    let r = m % n;</span><br><span class="line">    if(r === 0) &#123;</span><br><span class="line">        return n;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return gcd(n,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function fact(n) &#123;</span><br><span class="line">if(typeof n !== &apos;number&apos;) return;</span><br><span class="line">if(n === 0) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return n * fact(n-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是递归&quot;&gt;&lt;a href=&quot;#什么是递归&quot; class=&quot;headerlink&quot; title=&quot;什么是递归&quot;&gt;&lt;/a&gt;什么是递归&lt;/h1&gt;&lt;p&gt;递归（Recursion）,在数学与计算机科学中是指在函数的定义中有调用了函数自身的方法。是一种思考问题的方法，通过递归可以简化问题的定义。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue源码深入剖析之响应式系统</title>
    <link href="http://yoursite.com/2019/08/03/vue%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B9%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/08/03/vue源码深入剖析之响应式系统/</id>
    <published>2019-08-03T07:22:25.000Z</published>
    <updated>2019-08-03T08:55:15.532Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js作为一款十分流行mvvm框架，数据模型（vm）部分都是普通的js对象，但是对这些对象进行操作的时候，却能影响视图（v）。实现这一连接的就是「响应式系统」，Vue最核心的部分就是「响应式系统」。虽然日常使用中并不会修改「响应式系统」，但是深入学习它可以帮助我们了解之后有可能遇到的问题的根源，从而更好的解决问题。</p><a id="more"></a><h1 id="基本原理篇"><a href="#基本原理篇" class="headerlink" title="基本原理篇"></a>基本原理篇</h1><p>首先我们找到vue的目录，看到core文件夹下的目录结构如下：</p><div style="width:200px">        <img src="/2019/08/03/vue源码深入剖析之响应式系统/observer_folder_constructure.png" title="This is an example image"></div><p>「响应式系统」的所有源码都在observer文件夹下。为了更好的理解，之后的分析会把此文件夹下的代码<strong>由简入繁</strong>的展示。</p><h2 id="1-Object-defineProperty"><a href="#1-Object-defineProperty" class="headerlink" title="1. Object.defineProperty"></a>1. Object.defineProperty</h2><p>说到Vue的「响应式系统」，首先必须介绍一下Object.defineProperty, Vue就是基于他来实现「响应式系统」的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">obj: 目标对象</span><br><span class="line">prop: 需要操作的目标对象的属性名 </span><br><span class="line">descriptor: 描述符</span><br><span class="line">return value 传入对象 </span><br><span class="line">*/</span><br><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p>其中，简单介绍descriptor 的一些属性，这些在Vue中被使用。</p><ul><li>enumerable属性是否可枚举，默认 false。</li><li>configurable属性是否可以被修改或者删除，默认 false。</li><li>get获取属性的方法。</li><li>set设置属性的方法。</li></ul><h2 id="2-把对象响应式化（defineReactive）"><a href="#2-把对象响应式化（defineReactive）" class="headerlink" title="2. 把对象响应式化（defineReactive）"></a>2. 把对象响应式化（defineReactive）</h2><p>知道了Object.defineProperty以后，Vue用它使对象变成可观察的。</p><p>由于源码中defineReactive有很多功能，较为复杂，我们可以先简单的实现一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function defineReactive (obj, key, val) &#123; </span><br><span class="line">    Object.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: true, /* 属性可枚举 */ </span><br><span class="line">        configurable: true, /* 属性可被修改或删除 */ </span><br><span class="line">        get: function reactiveGetter () &#123;</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function reactiveSetter (newVal) &#123; </span><br><span class="line">            if (newVal === val) return; </span><br><span class="line">            callback(newVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中callback是回调方法，这个函数用来模拟视图更新，调用它即代表更新视图。此处我们就随便写一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function callback (val) &#123; </span><br><span class="line">    console.log(&quot;视图更新！&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过defineReactive处理以后，我们的obj的key属性在「读」的时候会触发reactiveGetter方法，而在该属性被「写」的时候则会触发 reactiveSetter方法。</p><h2 id="3-Observer"><a href="#3-Observer" class="headerlink" title="3. Observer"></a>3. Observer</h2><p>有了前面的defineReactive，我们需要在上面再封装一层observer。</p><p>由于源码中observer有很多功能，较为复杂，我们可以先简单的实现一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function observer (value) &#123;</span><br><span class="line">    if (!value || (typeof value !== &apos;object&apos;)) &#123;</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    Object.keys(value).forEach((key) =&gt; &#123;</span><br><span class="line">       defineReactive(value, key, value[key]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数传入一个 value(需要「响应式」化的对象)，通过遍历所有属性的方式对该对象的每一个属性都通过defineReactive处理。</p><h1 id="原理的基础实现"><a href="#原理的基础实现" class="headerlink" title="原理的基础实现"></a>原理的基础实现</h1><p>有了上述的模块，我们就可以简单的实现一个「响应式系统」了，也可以说实现一个Vue的雏形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Vue &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this.data = options.data;</span><br><span class="line">        observer(this.data); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Vue 的构造函数中，对options的data进行处理，这里的data想必大家很熟悉，就是平时我们在写Vue项目时组件中的data属性(实际上是一个函数，这里当作一个对象来简单处理)。</p><p>然后我们把他实例化，并且修改一下被响应式化了的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let app = new Vue(&#123; </span><br><span class="line">    data: &#123;</span><br><span class="line">       test: &quot;I am test.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.data.test = &quot;hello,world.&quot;;</span><br></pre></td></tr></table></figure><p>你会看到console里输出了之前callback函数的语句——“视图更新！”</p><p>至此，响应式原理已经介绍完了</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>一个简单的响应式系统完成了，可是它还有很多的问题，比如：</p><ol><li>如果视图上并不需要用到的属性<code>imnouse</code>更新了，我们这个雏形中也仍然会执行callback操作。</li><li>在有多个视图共享同一个数据模型的时候，属性<code>imveryfamous</code>被<code>view1</code>和<code>view2</code>视图实例用来展示。此时<code>imveryfamous</code>改变了，需要准确的通知到<code>view1</code>和<code>view2</code>，而不要通知其他的视图。</li></ol><p>这就需要用到下一篇要说的「依赖收集」，它是「响应式系统」很重要的一个功能，源码也放置在<code>core\observer</code>文件夹中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue.js作为一款十分流行mvvm框架，数据模型（vm）部分都是普通的js对象，但是对这些对象进行操作的时候，却能影响视图（v）。实现这一连接的就是「响应式系统」，Vue最核心的部分就是「响应式系统」。虽然日常使用中并不会修改「响应式系统」，但是深入学习它可以帮助我们了解之后有可能遇到的问题的根源，从而更好的解决问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>first blog</title>
    <link href="http://yoursite.com/2019/08/01/first-blog/"/>
    <id>http://yoursite.com/2019/08/01/first-blog/</id>
    <published>2019-08-01T11:47:56.000Z</published>
    <updated>2019-08-03T09:39:21.425Z</updated>
    
    <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, vix ut case porro facilisis, alia possit neglegentur vis te. Has cu eirmod abhorreant, vel civibus efficiantur cu. Eu summo elitr vix, iusto putant maluisset per ut, ne etiam vivendum adipisci vel. Vis omnis tempor accusam ei, justo perpetua liberavisse cu qui. Saperet aliquando adipiscing ius ne, ne facer euripidis est. Pro mundi nostrum suavitate et.</p><p>Vix dico eius nominati cu, ex zril commodo fuisset mea. Habeo adhuc audiam ius no. In quis virtute officiis has. Vix ad honestatis accommodare, quis virtute et sit, pertinax expetenda eam id. Duo an fuisset delectus dissentias, justo altera ea per.</p><a id="more"></a><h5 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h5><p>Duis id ante elit. Aliquam quis tellus id orci eleifend finibus. Donec consequat justo ligula, eget sodales purus hendrerit at.</p><ol><li>Ut at interdum nunc. Maecenas commodo turpis quis elementum gravida.</li><li>Nunc ac sapien tellus. Quisque risus enim, tempus eget porttitor in, pellentesque vel urna.<br> Donec nibh massa, rutrum a sollicitudin eu,<br>lacinia in lorem.</li></ol><h5 id="Graphic-design"><a href="#Graphic-design" class="headerlink" title="Graphic design"></a>Graphic design</h5><blockquote><p>Graphic design is the paradise of individuality, eccentricity, heresy, abnormality, hobbies, and humors. - George Santayana</p></blockquote><p>Vim te case nihil oblique, has partem interpretaris ne, ad admodum accusamus nam. Usu utinam dissentias referrentur ne, vim accusam voluptua pertinacia no. Est no posse utinam inermis, brute errem mentitum et ius, te prompta albucius quo. In pro simul soleat regione.</p><p><img src="https://static.pexels.com/photos/6454/nature-flowers-summer-branches-large.jpg" alt="alt"></p><p>Ne reque offendit singulis mea, ad eos ferri doming nostrud. Duis suscipit usu ut, fuisset pericula ex est, et porro prompta his. Audire definiebas voluptatibus et duo, aperiam ocurreret ad nec. Vel ad nostrud principes. Ad liber congue iracundia sed, eirmod erroribus eam te, has veniam epicurei ea.</p><p>Pri probo alterum aliquando an. Duo appetere laboramus intellegat ea, ex suas diam exerci vix. Mel simul debitis id, est nusquam fuisset mentitum in. Te mei iudico iisque.</p>]]></content>
    
    <summary type="html">
    
      Have a look at all the predesigned elements you can use in Chalk.
    
    </summary>
    
    
      <category term="common" scheme="http://yoursite.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/19/hello-world/"/>
    <id>http://yoursite.com/2019/06/19/hello-world/</id>
    <published>2019-06-19T15:22:04.000Z</published>
    <updated>2019-06-19T15:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
